{"version":3,"file":"static/js/499.d3b894d0.chunk.js","mappings":"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","sources":["hooks/use-input.js","webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuotes.js"],"sourcesContent":["import { useReducer, useState } from \"react\";\n\nconst useInput = (validateValue) => {\n\n  const [enteredValue, setenteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setenteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setenteredValue(\"\");\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError: hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__9h8Dh\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__ogBoi\",\"loading\":\"QuoteForm_loading__gyIuQ\",\"control\":\"QuoteForm_control__8SqBM\",\"actions\":\"QuoteForm_actions__I8AC6\",\"invalid\":\"QuoteForm_invalid__yZe6r\",\"error-text\":\"QuoteForm_error-text__5x10t\"};","import React from \"react\";\nimport { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n\n  const {\n    value: authorNameValue,\n    isValid: enteredAuthorNameIsValid,\n    hasError: authorNameInputHasError,\n    valueChangeHandler: authorNameInputChangeHandler,\n    inputBlurHandler: authorNameInputBlurHandler,\n    reset: resetAuthorNameInput,\n  } = useInput((value) => /^[A-Za-z][A-Za-z ]+$/i.test(value));\n\n  const {\n    value: textValue,\n    isValid: enteredTextIsValid,\n    hasError: textInputHasError,\n    valueChangeHandler: textInputChangeHandler,\n    inputBlurHandler: textInputBlurHandler,\n    reset: resetTextInput,\n  } = useInput(isNotEmpty);\n\n  let formIsValid = false;\n\n  if (enteredAuthorNameIsValid && enteredTextIsValid) {\n    formIsValid = true;\n  }\n\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n\n    resetAuthorNameInput();\n    resetTextInput();\n  }\n\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n\n  const authorControlClasses = `${classes.control} ${\n    authorNameInputHasError ? classes.invalid : \"classes.invalid\"\n  }`; \n\n  const textControlClasses = `${classes.control} ${\n    textInputHasError ? classes.invalid : \"classes.invalid\"\n  }`; \n\n  return (\n    <React.Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) => \"Are you sure? All data will be lost!\"}\n      />\n      <Card>\n        <form\n          onFocus={formFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={authorControlClasses}>\n            <label htmlFor=\"author\">Author</label>\n            <input\n              type=\"text\"\n              id=\"author\"\n              ref={authorInputRef}\n              onChange={authorNameInputChangeHandler}\n              onBlur={authorNameInputBlurHandler}\n              value={authorNameValue}\n            />\n            {authorNameInputHasError && (\n              <p className=\"error-text\">Invalid Author Name!</p>\n            )}\n          </div>\n          <div className={textControlClasses}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea\n              id=\"text\"\n              rows=\"5\"\n              ref={textInputRef}\n              onChange={textInputChangeHandler}\n              onBlur={textInputBlurHandler}\n              value={textValue}\n            ></textarea>\n            {textInputHasError && (\n              <p className=\"error-text\">Text must not be empty!</p>\n            )}\n          </div>\n          <div className={classes.actions}>\n            <button disabled={!formIsValid} onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport { Route, useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst NewQuotes = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n  return (\n    <QuoteForm isLoading={status === \"pending\"} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default NewQuotes;\n"],"names":["validateValue","useState","enteredValue","setenteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","props","className","classes","children","isNotEmpty","trim","isEntering","setIsEntering","useInput","test","authorNameValue","enteredAuthorNameIsValid","authorNameInputHasError","authorNameInputChangeHandler","authorNameInputBlurHandler","resetAuthorNameInput","textValue","enteredTextIsValid","textInputHasError","textInputChangeHandler","textInputBlurHandler","resetTextInput","formIsValid","authorInputRef","useRef","textInputRef","authorControlClasses","textControlClasses","when","message","location","onFocus","onSubmit","preventDefault","enteredAuthor","current","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","onChange","onBlur","rows","disabled","onClick","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"sourceRoot":""}